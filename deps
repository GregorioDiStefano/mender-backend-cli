#!/usr/bin/env python3

import argparse
import logging
import io
import json
from collections import OrderedDict
from pprint import pprint
from common import run_command, CommandNotSupportedError

import requests

def parse_arguments():
    parser = argparse.ArgumentParser(description='deployments client',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-d', '--debug', help='Enable debugging output',
                        default=False, action='store_true')
    parser.add_argument('-s', '--service', help='Service address',
                        default='https://docker.mender.io:8080/api/integrations/0.1/deployments')
    parser.add_argument('-n', '--no-verify', help='Skip certificate verification',
                        default=False, action='store_true')
    parser.set_defaults(command='')
    sub = parser.add_subparsers(help='Commands')

    # images
    pimages = sub.add_parser('images', help='Commands for images')
    pimages.set_defaults(command='images', imcommand='')
    pisub = pimages.add_subparsers(help='Commands for images')
    # image download
    pidown = pisub.add_parser('download', help='Download image')
    pidown.set_defaults(imcommand='download')
    pidown.add_argument('id', help='Image ID')
    # image remove
    pidel = pisub.add_parser('remove', help='Remove image')
    pidel.set_defaults(imcommand='remove')
    pidel.add_argument('id', help='Image ID')
    # image show
    pishow = pisub.add_parser('show', help='Show image')
    pishow.set_defaults(imcommand='show')
    pishow.add_argument('id', help='Image ID')
    # images list
    pishow = pisub.add_parser('list', help='List images')
    pishow.set_defaults(imcommand='list')
    # image add
    piadd = pisub.add_parser('add', help='Add image and upload its contents')
    piadd.set_defaults(imcommand='add')
    piadd.add_argument('-n', '--name', help='Image name', required=True)
    piadd.add_argument('-e', '--description', help='Image description', required=True)
    piadd.add_argument('-t', '--device-type', help='Device type', required=True)
    piadd.add_argument('-c', '--checksum', help='Image checksum', required=True)
    piadd.add_argument('-y', '--yocto-id', help='Yocto image name', required=True)
    piadd.add_argument('infile', help='Image file')

    # deployments
    pdeps = sub.add_parser('deployments', help='Commands for deployments')
    pdeps.set_defaults(command='deployments', depcommand='')

    pdsub = pdeps.add_subparsers(help='Commands for deployment')

    # deployment add
    pdadd = pdsub.add_parser('add', help='Add deployment')
    pdadd.set_defaults(depcommand='add')
    pdadd.add_argument('-a', '--artifact-name', help='Artifact name',
                       required=True)
    pdadd.add_argument('-e', '--device', help='Devices', action='append',
                       required=True)
    pdadd.add_argument('-n', '--name', help='Deployment name',
                       required=True)
    # deployment find
    pdfind = pdsub.add_parser('find', help='Lookup deployment')
    pdfind.set_defaults(depcommand='find')
    pdfind.add_argument('name', help='Deployment name')
    # deployment status
    pdstatus = pdsub.add_parser('status', help='See status')
    pdstatus.set_defaults(depcommand='status')
    pdstatus.add_argument('id', help='Deployment ID')
    # deployment statistics
    pdstats = pdsub.add_parser('stats', help='See statistics')
    pdstats.set_defaults(depcommand='stats')
    pdstats.add_argument('id', help='Deployment ID')
    # deployment devices
    pddevs = pdsub.add_parser('devices', help='List devices')
    pddevs.set_defaults(depcommand='devices')
    pddevs.add_argument('id', help='Deployment ID')
    # deployment device logs
    pdlogs = pdsub.add_parser('logs', help='Show device deployment logs')
    pdlogs.set_defaults(depcommand='logs')
    pdlogs.add_argument('id', help='Deployment ID')
    pdlogs.add_argument('devid', help='Device ID')

    return parser.parse_args()


def jsonprinter(rsp):
    if not isinstance(rsp, requests.Response):
        raise TypeError("expected requests.Response")
    pprint(rsp.json())


def simpleprinter(rsp):
    if not isinstance(rsp, requests.Response):
        raise TypeError("expected requests.Response")
    print(rsp.text)


def do_simple_get(url, printer=jsonprinter, **kwargs):
    rsp = requests.get(url, **kwargs)
    logging.debug(rsp)
    if rsp.status_code == 200:
        printer(rsp)
    else:
        logging.warning('request failed: %s %s', rsp, rsp.json())
    return rsp


def do_deployments_find(opts):
    logging.debug('lookup deployment %s', opts.name)
    url = opts.service + '/deployments'
    do_simple_get(url, params={'name': opts.name},
                  verify=opts.verify)


def do_deployments_add(opts):
    logging.debug('lookup deployment %s', opts.name)
    url = opts.service + '/deployments'
    rsp = requests.post(url,
                        json={
                            'name': opts.name,
                            'artifact_name': opts.artifact_name,
                            'devices': opts.device,
                        },
                        verify=opts.verify)
    if rsp.status_code == 201:
        # created
        location = rsp.headers.get('Location', '')
        print("created with URL: {}".format(location))
        print('deployment ID: ', location.rsplit('/')[-1])
    else:
        logging.warning('request failed: %s %s', rsp, rsp.json())


def do_deployments_status(opts):
    logging.debug('get deployment %s', opts.id)
    url = opts.service + '/deployments/{}'.format(opts.id)
    do_simple_get(url, verify=opts.verify)


def do_deployments_stats(opts):
    logging.debug('get deployment %s stats', opts.id)
    url = opts.service + '/deployments/{}/statistics'.format(opts.id)
    do_simple_get(url, verify=opts.verify)


def do_deployments_devices(opts):
    logging.debug('get deployment %s devices', opts.id)
    url = opts.service + '/deployments/{}/devices'.format(opts.id)
    do_simple_get(url, verify=opts.verify)


def do_deployments_logs(opts):
    logging.debug('get log for deployment %s on device %s', opts.id, opts.devid)
    url = opts.service + '/deployments/{}/devices/{}/log'.format(opts.id, opts.devid)
    do_simple_get(url, printer=simpleprinter, verify=opts.verify)

def do_deployments(opts):
    logging.debug('deployment opts: %r', opts)
    cmds = {
        'add': do_deployments_add,
        'devices': do_deployments_devices,
        'find': do_deployments_find,
        'logs': do_deployments_logs,
        'stats': do_deployments_stats,
        'status': do_deployments_status,
    }
    run_command(opts.depcommand, cmds, opts)


def do_images_add(opts):
    logging.debug('add image %r', opts)
    url = opts.service + '/images'
    image = {
        'name': opts.name,
        'description': opts.description,
        'device_type': opts.device_type,
        'yocto_id': opts.yocto_id,
        'checksum': opts.checksum,
    }
    # build contents of multipart/form-data, image meta must come first, hence
    # we use an OrderedDict to preserve the order
    files = OrderedDict()
    for k, v in image.items():
        files[k] = (None, io.StringIO(v))
    # followed by firmware data
    files['firmware'] = (opts.infile, open(opts.infile, 'rb'), "application/octet-stream", {})

    rsp = requests.post(url, files=files, verify=opts.verify)
    if rsp.status_code == 201:
        # created
        location = rsp.headers.get('Location', '')
        print("created with URL: {}".format(location))
        print('image ID: ', location.rsplit('/')[-1])
    else:
        logging.warning('request failed: %s %s', rsp, rsp.json())


def do_images_download(opts):
    logging.debug('get image %s download', opts.id)
    url = opts.service + '/images/{}/download'.format(opts.id)
    do_simple_get(url, verify=opts.verify)


def do_images_show(opts):
    logging.debug('get image %s download', opts.id)
    url = opts.service + '/images/{}'.format(opts.id)
    do_simple_get(url, verify=opts.verify)


def do_images_list(opts):
    logging.debug('list images')
    url = opts.service + '/images'
    do_simple_get(url, verify=opts.verify)


def do_images(opts):
    logging.debug('images opts: %r', opts)
    cmds = {
        'find': None,
        'list': do_images_list,
        'add': do_images_add,
        'show': do_images_show,
        'remove': None,
        'download': do_images_download,
    }
    run_command(opts.imcommand, cmds, opts)


def main(opts):
    logging.debug('starting...')

    opts.verify = not opts.no_verify

    logging.debug('options: %r', opts)
    try:
        commands = {
            'deployments': do_deployments,
            'images': do_images,
        }
        run_command(opts.command, commands, opts)
    except requests.exceptions.RequestException as rerr:
        logging.error('request failed: %s', rerr)
    except CommandNotSupportedError:
        logging.error('incomplete or unsupported command, see --help')


if __name__ == '__main__':
    args = parse_arguments()

    level = logging.INFO
    if args.debug:
        level = logging.DEBUG

    logging.basicConfig(level=level)

    main(args)
