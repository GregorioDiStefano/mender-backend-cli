#!/usr/bin/env python3

import requests
import argparse
import logging

def parse_arguments():
    parser = argparse.ArgumentParser(description='device admission client',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-d', '--debug', help='Enable debugging output',
                        default=False, action='store_true')
    parser.add_argument('-s', '--service', help='Service address',
                        default='https://localhost:9080/api/integrations/0.1/admission/devices'
                        )
    parser.add_argument('-n', '--no-verify', help='Skip certificate verification',
                        default=False, action='store_true')
    parser.set_defaults(command='')
    sub = parser.add_subparsers(help='Commands')

    paccept = sub.add_parser('accept', help='Accept device')
    paccept.add_argument('device', help='Device ID')
    paccept.set_defaults(command='accept')

    preject = sub.add_parser('reject', help='Reject device')
    preject.add_argument('device', help='Device ID')
    preject.set_defaults(command='reject')

    pshow = sub.add_parser('show', help='Show device')
    pshow.add_argument('device', help='Device ID')
    pshow.set_defaults(command='show')

    plist = sub.add_parser('list', help='List devices')
    plist.set_defaults(command='list')

    return parser.parse_args()

def dump_device(data, showkey=True):
    logging.debug('device data: %r', data)
    print('device: %s' % data['id'])
    print('    status: %s' % data['status'])
    print('    attributes:')
    for k, v in data['attributes'].items():
        print('        %s : %s' % (k, v))
    if showkey:
        print('    public key:')
        print(data['key'])

def show_device(opts):
    url = opts.service + '/{}/status'.format(opts.device)
    r = requests.get(opts.service, verify=opts.verify)
    logging.debug("%r", r.status_code)

    dump_device(r.json()[0])

def list_devices(opts):
    r = requests.get(opts.service, verify=opts.verify)
    logging.debug("%r", r.status_code)

    for d in r.json():
        dump_device(d, showkey=False)

def set_device_status(opts, status):
    url = opts.service + '/{}/status'.format(opts.device)
    logging.debug('device URL: %s', url)
    r = requests.put(url,
                     verify=opts.verify,
                     json={
                         'status': status
                     })
    logging.debug("%r", r.status_code)
    logging.debug('%r', r.json())

def main(opts):
    logging.debug('starting...')

    opts.verify = not opts.no_verify

    logging.debug('options: %r', opts)
    try:
        if opts.command == 'list':
            list_devices(opts)
        if opts.command == 'accept':
            set_device_status(opts, 'accepted')
        if opts.command == 'reject':
            set_device_status(opts, 'rejected')
        if opts.command == 'show':
            show_device(opts)
    except requests.exceptions.RequestException as re:
        logging.error('request failed: %s', re)

if __name__ == '__main__':
    opts = parse_arguments()

    level = logging.INFO
    if opts.debug:
        level = logging.DEBUG

    logging.basicConfig(level=level)

    main(opts)
